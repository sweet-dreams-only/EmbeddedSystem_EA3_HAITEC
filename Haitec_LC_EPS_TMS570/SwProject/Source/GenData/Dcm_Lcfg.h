/* -----------------------------------------------------------------------------
  Filename:    Dcm_Lcfg.h
  Description: Configuration of DCM visible to any application.
               
               Manufacturer: Vector
               Source file:  C:\SynergyProjects\Haitec_LC_EPS_TMS570-nzx5jd\Haitec_LC_EPS_TMS570\Tools\AsrProject\Config\System\Haitec_LC.cdd
               EcuDoc:       Nxtr_Common_Manufacturing_Services_CommonDiagnostics
               Variant:      CommonDiagnostics

  Generated by GENy, 2015-08-28 13:52:48 -04:00
 ----------------------------------------------------------------------------- */
/* -----------------------------------------------------------------------------
  C O P Y R I G H T
 -------------------------------------------------------------------------------
  Copyright (c) 2008-2015 by Vctr Informatik GmbH. All rights reserved.
 
  This software is copyright protected and proprietary to Vctr Informatik 
  GmbH.
  
  Vctr Informatik GmbH grants to you only those rights as set out in the 
  license conditions.
  
  All other rights remain with Vctr Informatik GmbH.
 -------------------------------------------------------------------------------
 ----------------------------------------------------------------------------- */

#if !defined(__DCM_LCFG_H__)
#define __DCM_LCFG_H__

/* -----------------------------------------------------------------------------
    &&&~ Includes
 ----------------------------------------------------------------------------- */

/* RTE types (and/or function prototypes) */
#include "Rte_Type.h"


/* -----------------------------------------------------------------------------
    &&&~ Preprocessor constants (defines)
 ----------------------------------------------------------------------------- */

/* Configuration type identifier for consistency check to the static code part of DCM. */
#define DCM_LCFG_MAJOR_VERSION                                       0x05u
#define DCM_LCFG_MINOR_VERSION                                       0x84u


/* -----------------------------------------------------------------------------
    &&&~ Datatype definitions
 ----------------------------------------------------------------------------- */

/* Generated types (via RTE or GENy) */
typedef P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, DCM_VAR_NOINIT) Dcm_NegativeResponseCodePtrType;

/* Service callback type */
typedef P2FUNC(void, DCM_CODE, Dcm_ServiceProcessorType) (void);
typedef P2FUNC(void, DCM_CODE, Dcm_ServiceInitType) (void);
typedef P2FUNC(void, DCM_CODE, Dcm_ServicePostProcessorType) (Dcm_ConfirmationStatusType);

typedef uint16_least Dcm_EventType;
typedef uint16       Dcm_TimerCounterType;
typedef uint8        Dcm_MemTimerIdType;
typedef uint8_least  Dcm_TimerIdType;

/* Timer timeout callback type */
typedef P2FUNC (void, DCM_CODE, Dcm_TimerTimeoutCallBackType) (Dcm_TimerIdType);

typedef uint8_least Dcm_TimerEventType;
/* RX Path */
typedef uint8 Dcm_ConnectionRefType;
typedef uint8 Dcm_ProtocolRefType;
typedef uint8 Dcm_ReqAddressingType;
typedef uint8 Dcm_TxStateType;
typedef uint8 Dcm_ConnectionDiagType;
typedef uint8 Dcm_ServiceIdGroupType;

typedef struct
{
  Dcm_ReqAddressingType addrType;
}Dcm_RxPduInfoType;

typedef struct
{
  Dcm_ProtocolRefType     protRef;
  uint8                   sourceAddr;
  uint8                   commChannel;
  uint8                   numPerPduIds;
  Dcm_ConnectionDiagType  diagType;
  PduIdType               mainTxPduId;
#if (DCM_COM_MULTI_ID_ENABLED == STD_ON)
  Dcm_ComVariantMaskType  comVariants;
#endif
  Dcm_MsgLenType          maxBusPayloadLength;
  CONSTP2CONST(PduIdType, AUTOMATIC, DCM_CONST) pPeriodicTxPduIds;
}Dcm_PduConnectionType;

typedef struct
{
  Dcm_TimerSettingType                         minTimings;
  Dcm_TimerSettingType                         maxTimings;
  Dcm_MsgLenType                               mainBufferSize;
  CONSTP2VAR(uint8, AUTOMATIC, DCM_VAR_NOINIT) pMainBuffer;
  CONSTP2VAR(uint8, AUTOMATIC, DCM_VAR_NOINIT) pObdBuffer;
  CONSTP2VAR(uint8, AUTOMATIC, DCM_VAR_NOINIT) pPeriodicBufferPool;
}Dcm_PduProtocolType;

typedef uint8 Dcm_PduTranspObjKindType;
typedef struct
{
  PduInfoType              pduInfo;
#if (DCM_NUM_CONTEXTS > 1) || \
    (DCM_CONFIG_PRECOMPILE_ENABLED == STD_OFF)
  Dcm_ContextIdType        iContext;
#endif
  Dcm_ConnectionRefType    connId;
  Dcm_TxStateType          state;
  Dcm_PduTranspObjKindType kind;
#if (DCM_DSL_PPRH_SESSION_SUPPORT_ENABLED == STD_ON)
  boolean                  isReserved;
#endif
}Dcm_PduTransportInfoType;

typedef struct
{
  Dcm_PduTransportInfoType base;
#if (DCM_NUM_CONTEXTS > 1) || \
    (DCM_CONFIG_PRECOMPILE_ENABLED == STD_OFF)
  Dcm_MsgType              tempBuffer;
#endif
  Dcm_MsgLenType           totalRequestLength;
  PduIdType                rxPduId;
#if (DCM_NUM_CONTEXTS > 1) || \
    (DCM_CONFIG_PRECOMPILE_ENABLED == STD_OFF)
  Dcm_ServiceIdGroupType   svcIdGroup;
#endif
  Dcm_MsgItemType          sid;
}Dcm_PduRxTransportInfoType;

#if (DCM_DSL_SHARED_TX_CONN_ENABLED == STD_ON)
typedef struct
{
  Dcm_PduTransportInfoType base;
}Dcm_PduTxTransportInfoType;
#else
/* Same type since rx and tx are identical! */
typedef Dcm_PduRxTransportInfoType Dcm_PduTxTransportInfoType;
#endif


typedef uint8 Dcm_StateIdType;

typedef P2FUNC (void, DCM_CODE, Dcm_OnStateChangeCallBackType) (uint8_least, uint8 );

typedef struct
{
  Dcm_StateIdType                           NumStates;
  Dcm_NegativeResponseCodeType              Nrc;
  CONSTP2CONST(uint8, AUTOMATIC, DCM_CONST) StateValuePtr;
  Dcm_OnStateChangeCallBackType             OnChgCallBack;
}Dcm_StateGroupInfoType;

typedef uint8 Dcm_StateFilterIndexType;
typedef uint8 Dcm_StateTransitionIndexType;
typedef uint8 Dcm_StateMaskType;
typedef uint8 Dcm_ServicePropertyType;

typedef struct
{
  Dcm_ServicePropertyType       SvcProperty;
  Dcm_MsgLenType                MinReqLength;
  Dcm_MsgLenType                TotalReqLength;
  Dcm_StateFilterIndexType      StateFilterIdx;
  Dcm_ServiceProcessorType      ServiceProcessor;
  Dcm_ServiceInitType           ServiceInit;
  Dcm_ServicePostProcessorType  ServicePostProcessor;
}Dcm_ServiceTableType;

typedef uint8 Dcm_MemDidHandleType;
typedef uint8_least Dcm_DidHandleType;
typedef CONSTP2CONST(Dcm_MemDidHandleType, AUTOMATIC, DCM_CONST) Dcm_MemDidHandlePtrType;

typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_10_RteChgPermCallBackType) (Dcm_SesCtrlType /* currSession */, Dcm_SesCtrlType /* newsession  */);
typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_10_RteChgIndCallBackType)  (Dcm_SesCtrlType /* currSession */, Dcm_SesCtrlType /* newsession  */);
typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_10_RteRcrRpConfCallBackType)(Dcm_ConfirmationStatusType /* status */);

typedef struct
{
  Dcm_TimerSettingType          ResponseTime;
  Dcm_TimerSettingType          TickTime;
  Dcm_StateFilterIndexType      StateFilterIdx;
  Dcm_StateTransitionIndexType  TransIndex;
}Dcm_SessionControlInfoType;

typedef uint8_least Dcm_DemMgrDemOpType;
typedef uint8       Dcm_MemDemMgrDemOpType;
typedef struct
{
  Dcm_MemDemMgrDemOpType    DemOpType;
  Dcm_MsgLenType            ReqDataLength;
  Dcm_StateFilterIndexType  StateFilterIdx;
  Dcm_ServiceProcessorType  DtcSubFunction;
}Dcm_19_SubFunctionInfoType;

/* Service callback type */
typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_RteReadDidCallBackType)       (Dcm_RteDataPtrType /* dataPtr */);
typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_RteCheckReadDidCallBackType)  (Dcm_NegativeResponseCodePtrType /* errorPtr */);
typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_RteGetReadDidLenCallBackType) (Dcm_RteDataLenPtrType /* dataLenPtr */);


typedef struct
{
  Dcm_MsgLenType                    Length;
  Dcm_RteCheckReadDidCallBackType   CheckCondition;
  Dcm_RteGetReadDidLenCallBackType  GetDataLen;
  Dcm_RteReadDidCallBackType        ReadData;
}Dcm_22_ServiceInfoType;

/* Service callback type */
typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_RteGetSeedCallBackType) (Dcm_RteDataPtrType /* recordPtr */, Dcm_RteDataPtrType /* SeedPtr */, Dcm_NegativeResponseCodePtrType /* errorPtr */);
typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_RteSendKeyCallBackType) (Dcm_RteDataPtrType /* KeyPtr */);

typedef struct
{
#if (DCM_27_ATTEMPT_DELAY_ENABLED == STD_ON)
  uint8                        NumMaxAttDelay;
#endif
#if (DCM_27_TOTAL_ATTEMPTS_ENABLED == STD_ON)
  uint8                        NumMaxAttLock;
#endif
  uint8                        SeedLength;
  uint8                        KeyLength;
  uint8                        SeedRecordLength;
  Dcm_StateFilterIndexType     SeedStateFilterIdx;
  Dcm_StateFilterIndexType     KeyStateFilterIdx;
  Dcm_StateTransitionIndexType SeedTransIndex;
  Dcm_StateTransitionIndexType KeyTransIndex;
#if (DCM_27_ATTEMPT_DELAY_ENABLED == STD_ON)
  uint16                       DelayInvKey;
  uint16                       DelayAtPowerOn;
#endif
  Dcm_RteGetSeedCallBackType   GetSeedCallBack;
  Dcm_RteSendKeyCallBackType   SendKeyCallBack;
}Dcm_SecAccessTableType;

typedef struct
{
  uint8  AttemptCounter;
#if (DCM_27_TOTAL_ATTEMPTS_ENABLED == STD_ON)
  uint8  TotalAttemptCounter;
#endif
}Dcm_27_SecLevelStateMachineType;

/* Service callback type */
typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_RteWriteDidCallBackType)      (Dcm_RteDataPtrType /* dataPtr */, Dcm_MsgLenType /*dataLen*/, Dcm_NegativeResponseCodePtrType /* errorPtr */);
typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_RteCheckWriteDidCallBackType) (Dcm_NegativeResponseCodePtrType /* errorPtr */);


typedef struct
{
  Dcm_MsgLenType                    MinLength;
  Dcm_MsgLenType                    MaxLength;
  Dcm_RteCheckWriteDidCallBackType  CheckCondition;
  Dcm_RteWriteDidCallBackType       WriteData;
}Dcm_2E_ServiceInfoType;

/* Service callback type */
typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_RteIoCtrlDidCallBackType)     (Dcm_RteDataPtrType /* requestPtr */,
                                                                                  Dcm_MsgLenType /* reqDataLen */,
                                                                                  Dcm_RteDataPtrType /* responsePtr */,
                                                                                  Dcm_NegativeResponseCodePtrType /* errorCodePrr */);

typedef struct
{
  Dcm_MsgLenType                    ReqMinLength;
  Dcm_MsgLenType                    ReqMaxLength;
  Dcm_MsgLenType                    ResLength;
  Dcm_RteIoCtrlDidCallBackType      IoControl;
}Dcm_2F_ServiceInfoType;

typedef uint8 Dcm_2F_MemInstHandleType;
typedef uint8_least Dcm_2F_InstHandleType;
/* Service callback type */
typedef P2FUNC (Std_ReturnType, DCM_APPL_CODE, Dcm_RteCtrlRidCallBackType)     (Dcm_RteDataPtrType /* requestPtr */,
                                                                                Dcm_RteDataLenType /* reqDataLen */,
                                                                                Dcm_RteDataPtrType /* responsePtr */,
                                                                                Dcm_RteDataLenPtrType /* resDataLenPtr */,
                                                                                Dcm_NegativeResponseCodePtrType /* errorPtr */);

typedef struct
{
  Dcm_MsgLenType                    ReqMinLength;
  Dcm_MsgLenType                    ReqMaxLength;
  Dcm_MsgLenType                    ResLength;
  Dcm_RteCtrlRidCallBackType        Control;
}Dcm_31_ServiceInfoType;

typedef uint8 Dcm_MemRidHandleType;
typedef uint8_least Dcm_RidHandleType;
typedef uint8 Dcm_MemRidInstHandleType;
typedef uint8_least Dcm_RidInstHandleType;


/* -----------------------------------------------------------------------------
    &&&~ Function prototypes
 ----------------------------------------------------------------------------- */

#define DCM_START_SEC_CODE
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */

extern FUNC(void, DCM_CODE) DcmOnTimeoutSession(Dcm_TimerIdType timerId);
extern FUNC(void, DCM_CODE) DcmOnTimeoutResponsePending(Dcm_TimerIdType timerId);
extern FUNC(void, DCM_CODE) DcmOnChgStateSession(uint8_least stateGroupIdx, uint8 newStateIdx);
extern FUNC(void, DCM_CODE) DcmOnChgStateSecurity(uint8_least stateGroupIdx, uint8 newStateIdx);
extern FUNC(void, DCM_CODE) Dcm_DspDiagSessionControl(void);
extern FUNC(void, DCM_CODE) Dcm_DspInitDummyService(void);
extern FUNC(void, DCM_CODE) Dcm_DspPostDiagSessionControl(Dcm_ConfirmationStatusType status);
extern FUNC(void, DCM_CODE) Dcm_DspClearDiagInfo(void);
extern FUNC(void, DCM_CODE) Dcm_DspPostClearDiagInfo(Dcm_ConfirmationStatusType status);
extern FUNC(void, DCM_CODE) Dcm_DspReadDtcInfo(void);
extern FUNC(void, DCM_CODE) Dcm_DspPostReadDtcInfo(Dcm_ConfirmationStatusType status);
extern FUNC(void, DCM_CODE) Dcm_DspReadDataById(void);
extern FUNC(void, DCM_CODE) Dcm_DspInitReadDataById(void);
extern FUNC(void, DCM_CODE) Dcm_DspPostReadDataById(Dcm_ConfirmationStatusType status);
extern FUNC(void, DCM_CODE) Dcm_DspSecurityAccess(void);
extern FUNC(void, DCM_CODE) Dcm_DspInitSecurityAccess(void);
extern FUNC(void, DCM_CODE) Dcm_DspPostSecurityAccess(Dcm_ConfirmationStatusType status);
extern FUNC(void, DCM_CODE) Dcm_DspWriteDataById(void);
extern FUNC(void, DCM_CODE) Dcm_DspInitWriteDataById(void);
extern FUNC(void, DCM_CODE) Dcm_DspPostWriteDataById(Dcm_ConfirmationStatusType status);
extern FUNC(void, DCM_CODE) Dcm_DspIoControlById(void);
extern FUNC(void, DCM_CODE) Dcm_DspPostDummyService(Dcm_ConfirmationStatusType status);
extern FUNC(void, DCM_CODE) Dcm_DspRoutineControl(void);
extern FUNC(void, DCM_CODE) Dcm_DspInitRoutineControl(void);
extern FUNC(void, DCM_CODE) Dcm_DspTesterPresent(void);
extern FUNC(void, DCM_CODE) Dcm_DspUnknownService(void);
extern FUNC(void, DCM_CODE) Dcm_DspPostUnknownService(Dcm_ConfirmationStatusType status);
extern FUNC(void, DCM_CODE) Dcm_DspReadDtcRNODTCBSM(void);
extern FUNC(void, DCM_CODE) Dcm_DspReadDtcRDTCBSM(void);
#define DCM_STOP_SEC_CODE
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */



/* -----------------------------------------------------------------------------
    &&&~ Uninitialized RAM 8Bit definitions
 ----------------------------------------------------------------------------- */

#define DCM_START_SEC_VAR_NOINIT_8BIT
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */

#if (DCM_DSL_PPRH_SUPPORT_ENABLED == STD_ON) || \
    (DCM_NUM_CONTEXTS > 1)
extern VAR(uint8, DCM_VAR_NOINIT) dcmPduTransportBuffer[DCM_DSL_CONCUR_BUFF_SIZE_CONST*DCM_DSL_NUM_TRANSP_OBJ_CONST];
#endif

#define DCM_STOP_SEC_VAR_NOINIT_8BIT
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */



/* -----------------------------------------------------------------------------
    &&&~ Uninitialized RAM unspecified definitions
 ----------------------------------------------------------------------------- */

#define DCM_START_SEC_VAR_NOINIT_UNSPECIFIED
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */

extern VAR(Dcm_TimerCounterType, DCM_VAR_NOINIT) dcmTimerEngine[DCM_NUM_TIMERS_CONST];

extern VAR(Dcm_PduRxTransportInfoType, DCM_VAR_NOINIT) dcmPduRxTransportInfo[DCM_DSL_NUM_TRANSP_OBJ_CONST];

#if (DCM_DSL_SHARED_TX_CONN_ENABLED == STD_ON)
extern VAR(Dcm_PduTxTransportInfoType, DCM_VAR_NOINIT) dcmPduTxTransportInfo[DCM_DSL_NUM_TRANSP_OBJ_CONST];
#else
/* Use shared resources */
# define dcmPduTxTransportInfo                                       dcmPduRxTransportInfo
#endif

extern VAR(Dcm_StateIdType, DCM_VAR_NOINIT) dcmCurrentStateInfo[2]; /* Global variable of the current DCM state */
extern VAR(Dcm_MemDidHandleType, DCM_VAR_NOINIT) dcm22_DidList[1][5];
extern VAR(Dcm_RteDataLenType, DCM_VAR_NOINIT) dcm22_DidResLen[1][5];
extern VAR(Dcm_27_SecLevelStateMachineType, DCM_VAR_NOINIT) dcm27_SecLevelStateEngine[1]; /* Global variable of the security access states */
#define DCM_STOP_SEC_VAR_NOINIT_UNSPECIFIED
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */



/* -----------------------------------------------------------------------------
    &&&~ ROM 8Bit definitions
 ----------------------------------------------------------------------------- */

#define DCM_START_SEC_CONST_8BIT
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */

extern CONST(uint8, DCM_CONST) dcmStateValuesSession[4];
extern CONST(uint8, DCM_CONST) dcmStateValuesSecurity[2];
extern CONST(uint8, DCM_CONST) dcmDspServiceIdTypeList[10];
extern CONST(uint8, DCM_CONST) dcm10_SubFuncLookUpTable[5];
extern CONST(uint8, DCM_CONST) dcm19_SubFuncLookUpTable[3];
extern CONST(uint8, DCM_CONST) dcm27_SubFuncLookUpTable[2];
extern CONST(uint8, DCM_CONST) dcm2F_SubFuncToCtrlTypeMap[4];
extern CONST(uint8, DCM_CONST) dcm31_SubFuncToCtrlTypeMap[4];
#define DCM_STOP_SEC_CONST_8BIT
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */



/* -----------------------------------------------------------------------------
    &&&~ ROM 16Bit definitions
 ----------------------------------------------------------------------------- */

#define DCM_START_SEC_CONST_16BIT
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */

extern CONST(uint16, DCM_CONST) dcmDidLookUpTable[50];
extern CONST(uint16, DCM_CONST) dcmRidLookUpTable[10];
#define DCM_STOP_SEC_CONST_16BIT
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */



/* -----------------------------------------------------------------------------
    &&&~ ROM unspecified definitions
 ----------------------------------------------------------------------------- */

#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */

/* Context management */
#if (DCM_NUM_CONTEXTS > 1)
extern CONST(Dcm_MemTimerIdType, DCM_CONST) dcmTmrMgrContextP2TimerId[DCM_NUM_CONTEXTS];
#endif

extern CONST(Dcm_TimerTimeoutCallBackType, DCM_CONST) dcmTimerManagerInfo[4];
extern CONST(Dcm_RxPduInfoType, DCM_CONST) dcmDslRxPduInfoTable[2];
extern CONST(Dcm_ConnectionRefType, DCM_CONST) dcmDslRxPdu2ConnMap[2][1];
extern CONST(Dcm_ConnectionRefType, DCM_CONST) dcmTxPduToConnTable[1];
extern CONST(Dcm_PduConnectionType, DCM_CONST) dcmDslPduConnectionInfoTable[1];
extern CONST(Dcm_PduProtocolType, DCM_CONST) dcmDslPduProtocolInfoTable[1];
extern CONST(Dcm_StateMaskType, DCM_CONST) dcmServiceStateFilterPool[6][2];
extern CONST(Dcm_StateMaskType, DCM_CONST) dcmStateTransPrecondInfo[6][2];
extern CONST(Dcm_StateIdType, DCM_CONST) dcmStateTransTargetInfo[6][2];
extern CONST(Dcm_StateGroupInfoType, DCM_CONST) dcmStateGroupInfo[2];
extern CONST(Dcm_ServiceTableType, DCM_CONST) dcmDspServiceInfoTable[10];
extern CONST(Dcm_SessionControlInfoType, DCM_CONST) dcm10_ServiceInfoTable[4];
extern CONST(Dcm_10_RteChgPermCallBackType, DCM_CONST)   dcm10_SesChgPermFunc;
extern CONST(Dcm_10_RteChgIndCallBackType, DCM_CONST)    dcm10_SesChgIndFunc;
extern CONST(Dcm_10_RteRcrRpConfCallBackType, DCM_CONST) dcm10_RcrRpConfFunc;

extern CONST(Dcm_19_SubFunctionInfoType, DCM_CONST) dcm19_ServiceInfoTable[2];
extern CONST(Dcm_StateFilterIndexType, DCM_CONST) dcm22_DidStateInfoTable[50];
extern CONST(Dcm_MemDidHandleType, DCM_CONST) dcm22_DidHandleTable[51];
extern CONST(Dcm_22_ServiceInfoType, DCM_CONST) dcm22_ServiceInfoTable[50];
extern CONST(Dcm_SecAccessTableType, DCM_CONST) dcm27_ServiceInfoTable[1];
extern CONST(Dcm_StateFilterIndexType, DCM_CONST) dcm2E_DidStateInfoTable[29];
extern CONST(Dcm_MemDidHandleType, DCM_CONST) dcm2E_DidHandleTable[30];
extern CONST(Dcm_2E_ServiceInfoType, DCM_CONST) dcm2E_ServiceInfoTable[29];
extern CONST(Dcm_StateFilterIndexType, DCM_CONST) dcm2F_DidStateInfoTable[3];
extern CONST(Dcm_StateFilterIndexType, DCM_CONST) dcm2F_SubFuncStateInfoTable[6];
extern CONST(Dcm_MemDidHandleType, DCM_CONST) dcm2F_DidHandleTable[4];
extern CONST(Dcm_2F_ServiceInfoType, DCM_CONST) dcm2F_ServiceInfoTable[6];
extern CONST(Dcm_2F_MemInstHandleType, DCM_CONST) dcm2F_DidControlTypeInfo[3][2];
extern CONST(Dcm_StateFilterIndexType, DCM_CONST) dcm31_RidStateInfoTable[9];
extern CONST(Dcm_StateFilterIndexType, DCM_CONST) dcm31_SubFuncStateInfoTable[11];
extern CONST(Dcm_31_ServiceInfoType, DCM_CONST) dcm31_ServiceInfoTable[11];
extern CONST(Dcm_MemRidInstHandleType, DCM_CONST) dcm31_ControlTypeInfo[9][3];
#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */



/* -----------------------------------------------------------------------------
    &&&~ Macro definitions
 ----------------------------------------------------------------------------- */

#define DcmDslRxPdu2ConnMap(x, y)                                    (dcmDslRxPdu2ConnMap[x][y])
#define DcmServiceStateFilterPool(x, y)                              (dcmServiceStateFilterPool[x][y])
#define DcmStateTransPrecondInfo(x, y)                               (dcmStateTransPrecondInfo[x][y])
#define DcmStateTransTargetInfo(x, y)                                (dcmStateTransTargetInfo[x][y])


#endif /* __DCM_LCFG_H__ */
